// my solution

let decrypt = (keyword, encrypt_code) => {
    const alphabet = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];
    let keywordedAlphabet = [];
        let deciphered = [];
        
        
    let filtered_alphabet = alphabet.map(function(value, index) {
        let filter_out_item = false;
        for (let i = 0; i < keyword.length; i++) {
            if (keyword[i] == value) {
                filter_out_item = true;
            }
        }
        if (!filter_out_item) {
            return value
        }
    }).filter((value)=> value !== undefined);
    
    
    for (let i = 0; i < filtered_alphabet.length; i++) {
        keywordedAlphabet.push(filtered_alphabet[i]);
    }
    for (let i = keyword.length; i > 0; i--) {
        keywordedAlphabet.unshift(keyword[i-1])
    }
    
    
    for (let i = 0; i < encrypt_code.length; i++) {
        for (let j = 0; j < keywordedAlphabet.length; j++) {
                if (encrypt_code[i] === keywordedAlphabet[j]) {
                    deciphered.push(alphabet[j])
                }
        }
    }
    
    let dechipered_string = deciphered.toString();
    result = dechipered_string.replace(/,/g,'');

    return result
}








// Try with

// decrypt("KEYWORD", "LXQAJI")
        // _KEYWORD
            // "KEYWORD",
        // _CODE
            // "LXQAJI"
        // _EXPECTED
            // "PYTHON"

// decrypt("INTER", "PRHIX")
        // _KEYWORD
            // "INTER",
        // _CODE
            // "PRHIX"
        // _EXPECTED
            // "RELAX"

// decrypt("SHARP", "JEQTSGP")
        // _KEYWORD
            // "SHARP",
        // _CODE
            // "JEQTSGP"
        // _EXPECTED
            // "MISTAKE"

// decrypt("LENGTH", "ALJT")
        // _KEYWORD
            // "LENGTH",
        // _CODE
            // "ALJT"
        // _EXPECTED
            // "GAME"

// decrypt("ENGLISH", "EIQMNBGR")
        // _KEYWORD
            // "ENGLISH",
        // _CODE
            // "EIQMNBGR"
        // _EXPECTED
            // "AEROBICS"

// KEYWORD is generated by BACKEND && send to => APP
// _KEY is received SEPERATELY by USER throough --email --sms
//--> decription by eventually having both

















// _ skillvalue.com -- test format

var input_string = readInputContent();
var data = input_string.split('\n');

var keyword = data[0];
var cripted_word = data[1];
// YOUR CODE HERE


let decrypt = (keyword, encrypt_code) => {
    const alphabet = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];
    let keywordedAlphabet = [];
        let deciphered = [];
        
        
    let filtered_alphabet = alphabet.map(function(value, index) {
        let filter_out_item = false;
        for (let i = 0; i < keyword.length; i++) {
            if (keyword[i] == value) {
                filter_out_item = true;
            }
        }
        if (!filter_out_item) {
            return value
        }
    }).filter((value)=> value !== undefined);
    
    
    for (let i = 0; i < filtered_alphabet.length; i++) {
        keywordedAlphabet.push(filtered_alphabet[i]);
    }
    for (let i = keyword.length; i > 0; i--) {
        keywordedAlphabet.unshift(keyword[i-1])
    }
    
    
    for (let i = 0; i < encrypt_code.length; i++) {
        for (let j = 0; j < keywordedAlphabet.length; j++) {
                if (encrypt_code[i] === keywordedAlphabet[j]) {
                    deciphered.push(alphabet[j])
                }
        }
    }
    
    let dechipered_string = deciphered.toString();
    result = dechipered_string.replace(/,/g,'');

    return result
}





var result = decrypt(keyword, cripted_word);
printOutput(result);